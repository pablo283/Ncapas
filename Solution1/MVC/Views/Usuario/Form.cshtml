@model ML.Usuario
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h5>Usuario</h5>
        </div>
    </div>

    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />

    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.IdUsuario, new { @class = "hidden" })
                            @Html.TextBoxFor(model => model.IdUsuario, new { @class = "form-control hidden" })
                            @Html.ValidationMessageFor(model => model.IdUsuario)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Nombre)
                            @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @onkeypress = "return soloLetras(event);" })
                            <label id="lblEdadError" style="color:red"></label>
                            @Html.ValidationMessageFor(model => model.Nombre)

                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ApellidoPaterno)
                            @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", @onkeypress = "return soloLetras(event);" })
                            <label id="lblEdadError" style="color:red"></label>
                            @Html.ValidationMessageFor(model => model.ApellidoPaterno)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ApellidoMaterno)
                            @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", @onkeypress = "return soloLetras(event);" })
                            
                            @Html.ValidationMessageFor(model => model.ApellidoMaterno)

                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @*@type = "password",*@
                            @Html.LabelFor(model => model.Contrasenia)
                            @Html.TextBoxFor(model => model.Contrasenia, new { @class = "form-control",  @id = "txtPassword", @onkeypress = "return verificaPassword();" })
                            Debe contener de 8 a 15 caracteres, mayuscula, minuscula, caracter especial, numero, ej. JHop98@@//
                            <label id="lblEdadError" style="color:red"></label>
                            @Html.ValidationMessageFor(model => model.Contrasenia)
                        </div>
                    </div>
                    <label for="name">Confirma password:</label>
                    <input type="text" id="txtPassword2" onclick="return verificaPassword()" name="name" required
                           minlength="8" maxlength="15" size="10">

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.NumeroCelular)
                            @Html.TextBoxFor(model => model.NumeroCelular, new { @class = "form-control", @onkeypress = "return soloNumeros(event);" })
                            <label id="lblEdadError" style="color:red"></label>
                            @Html.ValidationMessageFor(model => model.NumeroCelular)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">                          
                            @Html.LabelFor(model => model.Email)
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmail", @onkeypress="return verificaEmail();"})
                          
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.FechaNacimiento)
                            @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control"})
                            <label id="lblEdadError" style="color:red"></label>
                            @Html.ValidationMessageFor(model => model.FechaNacimiento)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Sexo)
                            Masculino: @Html.RadioButtonFor(model => model.Sexo, "Masculino")
                            Femenino: @Html.RadioButtonFor(model => model.Sexo, "Femenino")
                            @Html.ValidationMessageFor(model => model.Sexo)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Estatus)
                            @Html.TextBoxFor(model => model.Estatus, new { @class = "form-control", @onkeypress = "return soloLetras(event);" })
                            <label id="lblEdadError" style="color:red"></label>
                            @Html.ValidationMessageFor(model => model.Estatus)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.IdDireccion)
                            @Html.TextBoxFor(model => model.IdDireccion, new { @class = "form-control", @onkeypress = "return soloNumeros(event);" })
                            <label id="lblEdadError" style="color:red"></label>
                            @Html.ValidationMessageFor(model => model.IdDireccion)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Rol.IdRol)
                            @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Roles, "IdRol", "Nombre"), "Selecciona un Rol correspondiente", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Rol.IdRol)
                        </div>
                    </div>






                    <div class="form-group">
                        <div class="col-md-3">
                            @*@Html.LabelFor(model => model.Imagen)
                                <input type="file" name="ImagenData" onchange="readURL(this);">
                                @if (Model.Imagen != null)
                                {

                                    <img id="ImagenPreview" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Imagen)" width="100" height="100" />
                                }
                                else
                                {
                                    <img id="ImagenPreview" src="~/ImagenDefault/DEFAULT.jpg" style=" height:150px; width:150px;" />

                                }*@

                            @*@Html.ValidationMessageFor(model => model.Imagen)*@
                        </div>

                    </div>

                    @*@Html.HiddenFor(model => model.Imagen)*@

                    <div class="form-group">
                        <div class="col-md-3">
                            <input type="submit" value="Guardar" class="btn btn-success" />
                            @Html.ActionLink("Regresar", "GetAll", "Usuario", htmlAttributes: new { @class = "btn btn-danger" })
                        </div>
                    </div>
                </div>



            }
        </div>
    </div>

    <script type="text/javascript">
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#ImagenPreview').attr('src', e.target.result);
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        function soloNumeros(e) {
            var key = e.key;
            var numberRegex = /^\s*[+-]?(\d+|\.\d+|\d+\.\d+|\d+\.)(e[+-]?\d+)?\s*$/
            if (numberRegex.test(key.toString())) {
                return true;
            }
            else {
                alert('Solo se aceptan numeros');
                return false;
            }
        }



        function soloLetras(e) {
            var key = e.key;
            var numberRegex = /^[A-Za-z]+$/
            if (numberRegex.test(key.toString())) {
                return true;
            }
            else {
                alert('Solo se aceptan letras');
                return false;
            }
        }


        function verificaEmail() {
            var txtEmail = document.getElementById("txtEmail").value;
            var key = txtEmail;
            var numberRegex = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/
            if (numberRegex.test(key.toString())) {
                document.getElementById("txtEmail").style.borderColor = "#008000" ///verde
            }
            else {

                document.getElementById("txtEmail").style.borderColor = "#FF0000" //rojo
            }
        }

        function verificaPassword(){
            var txtPassword = document.getElementById("txtPassword").value;
            var key = txtPassword;
            var numberRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$/
            if (numberRegex.test(key.toString()))
            {
                document.getElementById("txtPassword").style.borderColor = "#008000"

                var txtPassword2 = document.getElementById("txtPassword2").value;
                var key2 = txtPassword2;
                
                if (key.toString() == key2.toString() )//match
                {
                    document.getElementById("txtPassword2").style.borderColor = "#008000"
                }
                else
                {
                    document.getElementById("txtPassword2").style.borderColor = "#FF0000"
                }
                
            }
            else {

                document.getElementById("txtPassword").style.borderColor = "#FF0000"
            }
        }


    </script>


</div>



